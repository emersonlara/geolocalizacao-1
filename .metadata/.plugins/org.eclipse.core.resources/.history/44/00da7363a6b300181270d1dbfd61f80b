package com.aplicacao.geolocalizacao.api.service;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.transaction.Transactional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import com.aplicacao.geolocalizacao.api.mapeador.GeolocalizacaoTemperaturaMapper;
import com.aplicacao.geolocalizacao.api.model.ClienteEntity;
import com.aplicacao.geolocalizacao.api.model.TemperaturaOrigem;
import com.aplicacao.geolocalizacao.api.repository.ClienteRepository;
import com.aplicacao.geolocalizacao.api.repository.TemperaturaRespositoty;
import com.aplicacao.geolocalizacao.api.util.WebUtils;

@Service
public class ClienteService {
	
	@Autowired
	private ClienteRepository repository;
	
	@Autowired
	private TemperaturaOrigemService TemperaturaOrigemService;
	

	@Transactional
	public ClienteEntity saveCustomer(ClienteEntity clienteEntity, GeolocalizacaoTemperaturaMapper temperature) {
		
		ClienteEntity clienteSalvo = new ClienteEntity();
		TemperaturaOrigem temperaturaOrigem = new TemperaturaOrigem();
		
		Float maxTemp = temperature.getMax_temp();
		Float minTempo = temperature.getMin_temp();
		
		temperaturaOrigem.setTemperaturaMaxima(maxTemp);
		temperaturaOrigem.setTemperaturaMinima(minTempo);
		
		clienteSalvo = repository.save(clienteEntity);
		
		temperaturaOrigem.setCliente(clienteSalvo);
		TemperaturaOrigemService.saveTemperature(temperaturaOrigem);
		
		
		return clienteSalvo;
		
	}
	
	public ClienteEntity upgradeClient(Long codigo, ClienteEntity clienteSalvo ) {
		ClienteEntity clienteOld = searchCustomerByCode(codigo);
		
		BeanUtils.copyProperties(clienteSalvo, clienteOld, "id");
		
		
		return repository.save(clienteOld);
	}
	
	private ClienteEntity searchCustomerByCode(Long codigo) {
		ClienteEntity clienteEntity = repository.findOne(codigo);
		if(clienteEntity == null) {
			throw new EmptyResultDataAccessException(1);
		}
		return clienteEntity;
	}

	public GeolocalizacaoTemperaturaMapper customerProcess(HttpServletRequest request) {

		ArrayList<String> geoLocalizacao = new ArrayList<String>();
		
		String ipCliente = WebUtils.getClientIp(request);
		
		geoLocalizacao = WebUtils.geolocalizacao(ipCliente);
		
		GeolocalizacaoTemperaturaMapper woeid= WebUtils.woeid(geoLocalizacao);
		
		return woeid;
	}

	
	
}
